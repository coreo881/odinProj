This is nothing. I'm starting over. I've caught myself in a bullshit loop and I'm a little frustrated and demoralized. But I need to start over.  This part is painful but maybe I'm not progressing and maybe I need to make a hard turn.

So I'm just going to stream of consciousness this and see where it takes me. From what I've read and have seen in the students example, I'll want to store all of my inputs in variables FIRST. I need a solid method of doing that.  Also I like the idea of reducing clutter by just grabbing all the buttons and then giving them event listeners all at once.

- Create an initialize buttons function that starts when this thing starts. It'll give the buttons their functionality.

- Create variables that'll store operators and operands.


Okay, so I know I need event listeners lol.  But what happens? On click, run a function that does some stuff

Now I need a display variable and I want it to default to zero.

Need functions for my operators


Okay so here's the hard part.

When I click on a button I need to store that value. That stored value should default to zero then.


Click > display
-----
8-21-23
-----

I'm back again and thinking about this problem in a few ways.

1. After clicking on a button, do I want to store the number, then display it? I.e. display is always attached to store.

2. After clicking a button, do I want to display it, then store it? I.e. store x`is always attached to display?

3. After clicking a button, do I want to keep track very separately?

I think choice three. Because I've been attempting to keep them attached in some way and it hasn't been working out.


So I'm thinking that on each button press I commit that number to the first operand and then run a display function that updates the display

---
8/23/23
---

FOOTNOTE 1. I'm not gonna lie, this one feels a little hacky. I'm forcing the number to become a string, concatenating that string with whatever button was pressed then turning that string back into an integer.Feels weird but it's working...

FOOTNOTE 2. There are some checks I need to do before I commit to the display variable. Namely, when the display variable is at zero, and a number other than zero is pressed, the display variable should replace zero with that number rather than concatenate. Also, if zero is pressed when the display variable is at zero, no change should occur.

FOOTNOTE 3. There are a couple of not-so-edge cases that I need to deal with now.  The first is after the user equates an expression with the equal button and then immediately wants to use that number as the operand of another expression by hitting an operator button.  Right now, because I'm setting operands back to zero without any fallbacks, the first operand will alwyas be zero. The second is when a user tries to press another operator after dialing in their second operand as a shorthand for "equate this expression and then set up the next expression's first operand being the result and the operator being the selected operator." Right now I don't really have a solve for that.

FOOTNOTE 4. So in order to have a "smart" operator button, a button that'll equate AND set us up with the selected operator, I think that I need to be adding a check here to see if an operator was pressed already.


Flow
- Number press(es)
 - commit to operand 1 variable
 - commit to userinput display variable
 - update userinput display
- Operator press
    - check to see if operator was pressed
        - commit equated value to results variable
        - set operand 1 to results value
        - set operand 2 to zero
        - set operator to new operator
        - update userinput display variable
        - update results display variable
        - update userinput display
        - update results display
    - check to see if results is not null (equal btn was pressed)
        - set operand 1 to results value
        - set operator to new operator
        - update userinput display variable
        - update userinput display
    - else
        - commit to operator variable
    - update userinput display variable with operator
    - update userinput display
- Number press 
 - commit to operand 2 variable
 - commit to userinput display variable
- Equal button press
 - equate value
 - set first operand to 0
 - set second operand to 0
 - commit equated value to operand 1
 - commit equated value to results display variable
 - set operator variable to null
 - clear userinput display variable
 - update results display
- Clear button press
 - set operator to null
 - set first operand to 0
 - set second operand to 0
 - set userinput display variable to ""
 - set userinput display to ""
 - set results to null
 - set resultsDisplay to "0"
 - update userinput display
 - update resultsDisplay

==The other things
- Backspace button
    - If an operator has NOT been selected
        - if the number is an interger
            - Change the firstOperand variable into a string
            - remove one character from the right side of the firstOperand and change it back into a number
            - update userInput Display variable
            - update userInput Display
        - if the number is not an integer
            - Change the firstOperand variable into a string
            - remove one character from the right side of the firstOperand and change it back into a number
            - if the last character is a decimal, set decimal switch to false
            - update userInput Display variable
            - update userInput Display
    - If an operator has been selected
        - Change the secondOperand variable into a string
        - remove one character from the right side of the secondOperand and change it back into a number
        - update userInput Display variable
        - update userInput Display 
- Invert button
    - If an operator has NOT been selected
        - set the firstOperand variable to its negative
        - update userInput Display variable
        - update userInput Display
    - If an operator has been selected
        - set the secondOperand variable to its negative
        - update userInput Display variable
        - update userInput Display
- Percentage button
    - If an operator has NOT been selected
        - set the firstOperand to itself divided by 100
        - set userInput display variable to firstOperand
        - update display
    - If an operator has been selected    
        - set secondOperand to the following evaluated equation: firstOperand * (secondOperand / 100)
        - set userInput display variable to updated string
        - update display
- Decimal button
    - If a decimal DOESN'T exist in the operand/display variable
        - append a decimal to firstOperand
        - append a decimal to the display variable
        - update display
    - If a decimal DOES exist in the operand/display variable
        - do nothing

FOOTNOTE 4: Okay. I've made some real progress so far. I got the negative to positive button working. I got the percentage button working which was way easier than I thought it would be. Last, and unfortunately, very much not least, is the decimal button.  It threatening to drive me a little crazy. I've been dreading it a bit only because I knew it would require some really clever thinking around how I code the display....and tbh I thought that would be it. I didn't know I'd have to contend with JS's weird way of handling how it makes things floats, how it determines things are floats, etc etc. It's real weird. Price to pay for using a language that treats typing like a suggestion. Sigh. Back to the drawing board.

I'm going to list the bugs I have. I think I've figured out how to make it work for the first operand, and I beleive I can do the same for the second, but I just need to see the bug list and check them muthafuckas off.


=FIXED= 1. Pressing the decimal button then the negative button removes the decimal from the display. The value in the operand variable reamins correct.

Notes: Pressing the buttons in the reverse order does not have the same effect.


=FIXED= 2. The backspace button removes all decimal places AND the decimal from the display. It also removes all decimal places within the operand variable, but maintains the state of being a float.

E.G. 3.33 becomes 3 in the display. Clicking on the '9' key will display 39 while the operand variable with hold the value 3.9

These are a good start. Getting to work...


FEELING good on this progress. I have a couple more for youâ€”

3. If the number is a decimal, has only one number after the decimal, and backspace is pressed, both the decimal point and the number is deleted. What should happen is a removal of the number, and another press should remove the decimal.

=FIXED= 4. If I backspace numbers back to zero/no display, pressing the decimal button again on its own no longer shows the 0.


Hotel Riu Palace Aruba
J.E. Irausquin Blvd 79, Noord, Aruba
586 3900

Hotel Riu Palace Antillas
J.E. Irausquin Blvd 77, Noord, Aruba
